{"ast":null,"code":"var _jsxFileName = \"/Users/daviddaniliuc/My Drive/React Notes App Tutorial/mynotes/src/pages/NotePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// import notes from \"../assets/data\";\nimport { useParams, Link, useNavigate } from \"react-router-dom\";\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotePage = () => {\n  _s();\n  let navigate = useNavigate();\n  let noteId = useParams().id;\n  let [note, setNote] = useState(null);\n  useEffect(() => {\n    getNote();\n  }, [noteId]);\n  let getNote = async () => {\n    if (noteId === \"new\") {\n      return;\n    }\n    let response = await fetch(`http://localhost:8000/notes/${noteId}`);\n    let data = await response.json();\n    setNote(data);\n  };\n  let createNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ...note,\n        updated: new Date()\n      })\n    });\n  };\n  let updateNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ...note,\n        updated: new Date()\n      })\n    });\n  };\n  let deleteNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n    navigate(\"/\");\n  };\n  let handleSubmit = async () => {\n    if (noteId !== \"new\" && !note.body) {\n      deleteNote();\n    } else if (noteId === \"new\") {\n      updateNote();\n    } else if (noteId === \"new\" && note !== null) {\n      createNote();\n    }\n    navigate(\"/\");\n  };\n\n  // let note = notes.find((note) => note.id === Number(noteId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this), nodeId !== \"new\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({\n          ...note,\n          body: e.target.value\n        });\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 3\n  }, this);\n};\n_s(NotePage, \"a+ex9md+O9uF6+IKnqsZlQWofNU=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = NotePage;\nexport default NotePage;\nvar _c;\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","useNavigate","ReactComponent","ArrowLeft","jsxDEV","_jsxDEV","NotePage","_s","navigate","noteId","id","note","setNote","getNote","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","updated","Date","updateNote","deleteNote","handleSubmit","className","children","to","onClick","fileName","_jsxFileName","lineNumber","columnNumber","nodeId","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/daviddaniliuc/My Drive/React Notes App Tutorial/mynotes/src/pages/NotePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import notes from \"../assets/data\";\nimport { useParams, Link, useNavigate } from \"react-router-dom\";\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\n\nconst NotePage = () => {\n\tlet navigate = useNavigate();\n\n\tlet noteId = useParams().id;\n\tlet [note, setNote] = useState(null);\n\n\tuseEffect(() => {\n\t\tgetNote();\n\t}, [noteId]);\n\n\tlet getNote = async () => {\n\t\tif (noteId === \"new\") {\n\t\t\treturn;\n\t\t}\n\t\tlet response = await fetch(`http://localhost:8000/notes/${noteId}`);\n\t\tlet data = await response.json();\n\t\tsetNote(data);\n\t};\n\n\tlet createNote = async () => {\n\t\tawait fetch(`http://localhost:8000/notes/${noteId}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({ ...note, updated: new Date() }),\n\t\t});\n\t};\n\n\tlet updateNote = async () => {\n\t\tawait fetch(`http://localhost:8000/notes/${noteId}`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({ ...note, updated: new Date() }),\n\t\t});\n\t};\n\n\tlet deleteNote = async () => {\n\t\tawait fetch(`http://localhost:8000/notes/${noteId}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(note),\n\t\t});\n\t\tnavigate(\"/\");\n\t};\n\n\tlet handleSubmit = async () => {\n\t\tif (noteId !== \"new\" && !note.body) {\n\t\t\tdeleteNote();\n\t\t} else if (noteId === \"new\") {\n\t\t\tupdateNote();\n\t\t} else if (noteId === \"new\" && note !== null) {\n\t\t\tcreateNote();\n\t\t}\n\n\t\tnavigate(\"/\");\n\t};\n\n\t// let note = notes.find((note) => note.id === Number(noteId));\n\treturn (\n\t\t<div className=\"note\">\n\t\t\t<div className=\"note-header\">\n\t\t\t\t<h3>\n\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t<ArrowLeft onClick={handleSubmit} />\n\t\t\t\t\t</Link>\n\t\t\t\t</h3>\n\n\t\t\t\t{nodeId !== \"new\" ? (\n\t\t\t\t\t<button onClick={deleteNote}>Delete</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button onClick={handleSubmit}>Done</button>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<textarea\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tsetNote({ ...note, body: e.target.value });\n\t\t\t\t}}\n\t\t\t\tvalue={note?.body}\n\t\t\t></textarea>\n\t\t</div>\n\t);\n};\n\nexport default NotePage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AACA,SAASC,SAAS,EAAEC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AAC/D,SAASC,cAAc,IAAIC,SAAS,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,IAAIC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE5B,IAAIQ,MAAM,GAAGV,SAAS,CAAC,CAAC,CAACW,EAAE;EAC3B,IAAI,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACfe,OAAO,CAAC,CAAC;EACV,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EAEZ,IAAII,OAAO,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAIJ,MAAM,KAAK,KAAK,EAAE;MACrB;IACD;IACA,IAAIK,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BN,MAAO,EAAC,CAAC;IACnE,IAAIO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAChCL,OAAO,CAACI,IAAI,CAAC;EACd,CAAC;EAED,IAAIE,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMH,KAAK,CAAE,+BAA8BN,MAAO,EAAC,EAAE;MACpDU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACR,cAAc,EAAE;MACjB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE,GAAGZ,IAAI;QAAEa,OAAO,EAAE,IAAIC,IAAI,CAAC;MAAE,CAAC;IACtD,CAAC,CAAC;EACH,CAAC;EAED,IAAIC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMX,KAAK,CAAE,+BAA8BN,MAAO,EAAC,EAAE;MACpDU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACR,cAAc,EAAE;MACjB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE,GAAGZ,IAAI;QAAEa,OAAO,EAAE,IAAIC,IAAI,CAAC;MAAE,CAAC;IACtD,CAAC,CAAC;EACH,CAAC;EAED,IAAIE,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMZ,KAAK,CAAE,+BAA8BN,MAAO,EAAC,EAAE;MACpDU,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACR,cAAc,EAAE;MACjB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI;IAC1B,CAAC,CAAC;IACFH,QAAQ,CAAC,GAAG,CAAC;EACd,CAAC;EAED,IAAIoB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAInB,MAAM,KAAK,KAAK,IAAI,CAACE,IAAI,CAACU,IAAI,EAAE;MACnCM,UAAU,CAAC,CAAC;IACb,CAAC,MAAM,IAAIlB,MAAM,KAAK,KAAK,EAAE;MAC5BiB,UAAU,CAAC,CAAC;IACb,CAAC,MAAM,IAAIjB,MAAM,KAAK,KAAK,IAAIE,IAAI,KAAK,IAAI,EAAE;MAC7CO,UAAU,CAAC,CAAC;IACb;IAEAV,QAAQ,CAAC,GAAG,CAAC;EACd,CAAC;;EAED;EACA,oBACCH,OAAA;IAAKwB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACpBzB,OAAA;MAAKwB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC3BzB,OAAA;QAAAyB,QAAA,eACCzB,OAAA,CAACL,IAAI;UAAC+B,EAAE,EAAC,GAAG;UAAAD,QAAA,eACXzB,OAAA,CAACF,SAAS;YAAC6B,OAAO,EAAEJ;UAAa;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,EAEJC,MAAM,KAAK,KAAK,gBAChBhC,OAAA;QAAQ2B,OAAO,EAAEL,UAAW;QAAAG,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAE5C/B,OAAA;QAAQ2B,OAAO,EAAEJ,YAAa;QAAAE,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAC3C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eAEN/B,OAAA;MACCiC,QAAQ,EAAGC,CAAC,IAAK;QAChB3B,OAAO,CAAC;UAAE,GAAGD,IAAI;UAAEU,IAAI,EAAEkB,CAAC,CAACC,MAAM,CAACC;QAAM,CAAC,CAAC;MAC3C,CAAE;MACFA,KAAK,EAAE9B,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAER,CAAC;AAAC7B,EAAA,CAvFID,QAAQ;EAAA,QACEL,WAAW,EAEbF,SAAS;AAAA;AAAA2C,EAAA,GAHjBpC,QAAQ;AAyFd,eAAeA,QAAQ;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}